#########################################################
# ¡AGUANTA!
# ------------------------------------------ 
# Popular juego de resistencia utilizando
# las sentencias gráficas de JMEScript
# ------------------------------------------
# <JMEScript 0.2.0>
#########################################################
# Autor: Miguel Alejandro Moreno Barrientos
# (C) 2020
# Este código puede distribuirse/modificarse libremente
#########################################################


###############################################################
# Crea diccionario-rectángulo a partir de parámetros
# @param [Vector(2D)] posicion: esquina superior izquierda
# @param [Vector(2D)] direccion: vector unitario de dirección
# @param [Numero+] ancho: ancho en pixels del rectángulo
# @param [Numero+] alto: alto en pixels del rectángulo
# @param [Terminal(color)] color: color del rectángulo
# @return [Diccionario] rect: diccionario-rectángulo
###############################################################
rutina crearRectangulo( posicion, direccion, ancho, alto, color, 
						> var rect ) inicio:
	rect := dic( 'posicion', posicion, 
				 > 'direccion', direccion, 
				 > 'ancho', ancho, 
				 > 'alto', alto, 
				 > 'color', color )
fin

########################################################
# Dibuja vector de diccionario-rectángulo en el lienzo
# @param [Vector] rectangulos: lista de rectángulos
########################################################
rutina dibujarRectangulos( rectangulos ) inicio: 
	para cada rect en rectangulos inicio:
		ctx2d color relleno rect;#;'color'
		ctx2d rectangulo inicio rect;#;'posicion' 
						 > final rect;#;'posicion'
								 > +[rect;#;'ancho',rect;#;'alto']
						 > relleno verdadero 3d 'grabado'
	fin
fin

############################################################################
# Mueve los rectángulos según la velocidad de juego actual
# @param [Vector] rectangulos(E/S): lista de rectángulos a actualizar
# @param [Numero+] ancho: ancho en pixels del lienzo
# @param [Numero+] alto: alto en pixels del lienzo
# @param [Numero+] velocidad: velocidad de juego
# @return [Vector] rectangulos: la lista de rectángulos con la posición y 
#                               dirección actualizadas
############################################################################
rutina moverRectangulos( var rectangulos, ancho, alto, velocidad ) inicio:
	para cada idx,rect en rectangulos inicio:
		nueva_posicion := rect;#;'posicion' + rect;#;'direccion' * velocidad
		x,y :== nueva_posicion
		dx,dy :== rect;#;'direccion'
		w,h :== [rect;#;'ancho',rect;#;'alto']
		si x < 0 inicio:
			¬x
			¬dx
		fin
		si no, si x + w > ancho inicio:
			x -= 2((x+w)-ancho)
			¬dx
		fin
		si y < 0 inicio:
			¬y
			¬dy
		fin
		si no, si y + h > alto inicio:
			y -= 2((y+h)-alto)
			¬dy
		fin
		crearRectangulo( [x,y], [dx,dy], w, h, 
						 > rect;#;'color', nuevo_rect )
		rectangulos{idx} := nuevo_rect
		#rectangulos := set( rectangulos, idx, nuevo_rect )
	fin
fin

##########################################################################################
# Comprobar colisión entre rectángulo de jugador y demás rectángulos o bordes exteriores
# @param [Vector] rectangulos: lista de rectángulos enemigos
# @param [Diccionario] rect_movil: rectángulo de jugador
# @param [Numero+] ancho: ancho en pixels del lienzo
# @param [Numero+] alto: alto en pixels del lienzo
# @return [Booleano] colision: verdadero si hay colisión
##########################################################################################
rutina comprobarColision( rectangulos, rect_movil, ancho, alto, 
						  > var colision ) inicio:
	xm1,ym1 :== rect_movil;#;'posicion'
	xm2,ym2 :== rect_movil;#;'posicion' 
				> + [rect_movil;#;'ancho',rect_movil;#;'alto']
	# colisión con borde exterior
	si or( xm1<ancho/9, xm2>8*ancho/9, ym1<alto/9, ym2>8*alto/9 ) inicio:
		colision := verdadero
		romper rutina
	fin
	# colisión con rectángulos enemigos
	para cada rect en rectangulos inicio:
		x1,y1 :== rect;#;'posicion'
		x2,y2 :== rect;#;'posicion' + [rect;#;'ancho',rect;#;'alto']
		si and( ym1<=y2, ym2>=y1, x1<=xm2, x2>=xm1 ) inicio:
			colision := verdadero
			romper rutina
		fin
	fin
	colision := falso
fin

##########################################################################################
# Dibuja reloj de juego en el lienzo
# @param [Numero+] tiempo_juego: tiempo en milisegundos de la partida
# @param [Numero+] ancho: ancho en pixels del lienzo
# @param [Numero+] alto: alto en pixels del lienzo
##########################################################################################
rutina dibujarTiempo( tiempo_juego, ancho, alto ) inicio:
	txt := stexto((tiempo_juego/1000d)$3) + 's'  # tiempo con 3 decimales
	ctx2d texto txt dimension en txt_tama tama alto/18
	txtpos := [ancho-txt_tama;#;1-4,0]
	ctx2d color linea '#0000BB'
	ctx2d texto txt posicion txtpos tama alto/18  # sombreado
	ctx2d color linea '#FFFFAA'
	ctx2d texto txt posicion txtpos - [2,2] tama alto/18
fin


# --MAIN--

# definir dimensiones a partir del ancho/alto de pantalla si no están definidas
si indefinido(['ancho']) || indefinido(['alto']) inicio:
	ctx2d entorno en ent
	tama := min( ent;#;'pantalla.ancho',ent;#;'pantalla.alto' )*0.9
	ancho,alto := tama
	limpiar ent, tama  # ent puede ser una variable muy grande
fin

# iniciar rectángulo móvil
crearRectangulo( [41*ancho/90,41*alto/90], v0y, 4*ancho/45, 4*alto/45, 
				 > [255,0,0], rect_movil )

# iniciar rectángulos enemigos
rectangulos := []
crearRectangulo( [7*ancho/45,7*alto/45], unit(30º), 2*ancho/15, 2*alto/15, 
				 > [0,0,255,235], rect )
rectangulos ;= rect
crearRectangulo( [3*ancho/5,2*alto/15], unit(135º), 2*ancho/15, alto/9, 
				 > [0,0,255,235], rect )
rectangulos ;= rect
crearRectangulo( [7*ancho/45,32*alto/45], unit(-40º), ancho/15, 2*alto/15, 
				 > [0,0,255,235], rect )
rectangulos ;= rect
crearRectangulo( [2*ancho/3,11*alto/15], unit(-120º), 
				 > 2*ancho/9, 2*alto/45, [0,0,255,235], rect )
rectangulos ;= rect

# inicializar parámetros del juego
velocidad := 1
tiempo_juego := 0
arrastrando,iniciado := falso

# iniciar lienzo
ctx2d iniciar ancho alto titulo '¡¡AGUANTA!!'
ctx2d color fondo '#111122'
ctx2d repintar

# arrancar bucle de juego
mientras verdadero inicio:

	timestamp := tiempo(verdadero)

	# leer key strokes
	ctx2d pulsacion en key
	si !indefinido(['key']) inicio:
		si key;#;'keycode' = 27 inicio: # ESC: salida
			ctx2d finalizar
			imprimir 'Juego interrumpido'
			devolver
		fin
	fin

	# click sobre el rectángulo móvil
	ctx2d click en evento
	mientras !indefinido(['evento']) inicio:
		x,y :== rect_movil;#;'posicion'
		w,h :== [rect_movil;#;'ancho',rect_movil;#;'alto']
		evtid := evento;#;'id'
		evtx,evty :== evento;#;'posicion'
		
		si arrastrando && evtid = 'DRAGGED' inicio:
			rect_movil{'posicion'} := evento;#;'posicion' - [w/2,h/2]
		fin
		si no, si and( evtx >= x, evtx <= x+w, evty >= y, evty <= y+h,
					   > evtid = 'PRESSED') inicio:
			arrastrando, iniciado := verdadero
		fin
		si no, si evtid = 'RELEASED' inicio:
			arrastrando := falso
		fin
		
		ctx2d click en evento
		
	fin #mientras

	# limpiar y redibujar rectángulos
	ctx2d limpiar
	ctx2d color relleno [255,255,255]
	ctx2d rectangulo inicio [ancho/9,alto/9] final [8*ancho/9,8*alto/9] 
					 > relleno verdadero
	si iniciado inicio:
		moverRectangulos( rectangulos, ancho, alto, velocidad )
	fin
	dibujarRectangulos( rect_movil;;rectangulos )
	dibujarTiempo( tiempo_juego, ancho, alto )
	# actualizar
	ctx2d repintar

	# comprobar colisión
	comprobarColision( rectangulos, rect_movil, ancho, alto, colision )
	si colision inicio:
		mensaje := '¡Aguantaste '+stexto(tiempo_juego/1000d)+' segundos!'
		imprimir mensaje
		ctx2d msj mensaje
		ctx2d finalizar
		devolver
	fin

	# ajustar refresco a aproximadamente 100FPS
	jme: dormir(1e7) #ns

	# actualizar tiempo y velocidad
	si iniciado inicio:
		# añadir timespan al tiempo total
		tiempo_juego += tiempo(verdadero) - timestamp
		# ajustar velocidad logaritmicamente y según el tamaño de pantalla
		velocidad := (1 + ln1p( realdoble(tiempo_juego) )/ln1p(4))*mediag(ancho,alto)/1000
	fin

fin #mientras
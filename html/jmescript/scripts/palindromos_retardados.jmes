########################################################
## JMEScript 0.1.3, JME 0.6.1: ejemplo de script
## <Números palindrómicos retardados  [A023108,OEIS]>
########################################################

#########################################
## Variables externas: a,b,maxiter,msg
#########################################

# número invertido como cadena
def invertir(n) := revertir(stexto(n))

# test palindromicidad
rutina esPalindromo( n, var test ) inicio:
	test := falso
	nText := stexto(n)
	L := longitud(nText)
	
	para i:=1 hasta L/2 inicio:
		si nText;#;i != nText;#;(L-i+1) inicio:
			romper rutina
		fin
	fin
	
	test := verdadero
fin

# Nota: este no es el modo más eficiente de comprobar palíndromos
#def esPalindromico(n) := invertir(n) = stexto(n)

# comprueba si el número es palindrómico retardado
rutina palindromicoRetardado( n, maxiter, var res ) inicio:
	nsuma := n
	para i:= 0 hasta maxiter inicio:
		llamar a esPalindromo( nsuma, esPal )
		si esPal inicio:
			res := dic( 'n', n, 'palindromicoRetardado', verdadero , 'valor', nsuma, 'iter', i )
			romper rutina
		fin
		# sumar palíndromo (se eliminan ceros iniciales interpretados como octal)
		nsuma += enterogrande(reemplazar(invertir(nsuma),'^0*',''))
	fin
	
	res := dic( 'n', n, 'palindromicoRetardado', falso )
fin

#############################################################################################

# variables externas y valores por defecto
a,b :== [indefinido( 'a', 0 ),indefinido( 'b', 1000 )]
maxiter := indefinido( 'maxiter', 100 )
msg := indefinido( 'msg', falso )

# iniciar medición de tiempo de CPU
timestamp := tiempo(verdadero)

# crear secuencia de enteros [a,b]
arrayNum := enterogrande(rango( a, b+1 ))

# crear lista de resultados
listaResultados := []

para cada num en arrayNum inicio:
	llamar a palindromicoRetardado( num, maxiter, res )
	listaResultados ;= res
	si msg inicio:
		imprimir res
	fin
fin

# tiempo de CPU
timespan := tiempo(verdadero) - timestamp

# números palindrómicos y no palindrómicos retardados para maxiter
palRet := filtrar( item;#;'palindromicoRetardado', item, listaResultados )
noPalRet := filtrar( !item;#;'palindromicoRetardado', item, listaResultados )

# A030547: número de iteraciones incluyendo la inicial para alcanzar un palíndromo
numTerminos := propagar( dic('n',res;#;'n','nterms',res;#;'iter'++), res, palRet )

# mostrar resultados
imprimir
imprimir format( '%s numeros no palindromicos retardados (A023108) en el intervalo [%s,%s] con max. %s iteraciones: %s', [dim(noPalRet), a, b, maxiter, propagar( res;#;'n', res, noPalRet )] )
imprimir
imprimir 'CPU: ' + if( timespan<1000, stexto(timespan) + 'ms', stexto(timespan/1000d) + 's' )
imprimir
imprimir format( 'Secuencia de iteraciones incluyendo inicial (A030547); %s', [numTerminos] )

